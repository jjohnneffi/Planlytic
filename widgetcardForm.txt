
response = Map();
if(target.get("id").right(17) == "projecteditwidget")
{
	val_ind = target.get("id").indexOf(" ");
	recordid = target.get("id").subText(0,val_ind);
	info recordid;
	response_map = zoho.cliq.getRecordById("projectdb",recordid);
	rows = list();
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("object") != null)
	{
		row = Map();
		record = response_map.get("object");
		project_id = record.get("projectid");
		project_name = record.get("projectname");
		category = record.get("category").get("label");
		// 		category_label = category.get("label");
		client = record.get("client").get("label");
		// 		client_label = client.get("label");
		total_hours = record.get("totalhours");
		status = record.get("status").get("label");
		// 		status_label = status.get("label");
		total_budget = record.get("totalbudget");
		due_date = record.get("duedate");
		product_cost = record.get("productcost");
		team_members = record.get("teammembers");
		labor_cost = record.get("laborcost");
		start_date = record.get("startdate");
		description = record.get("description");
		team_lead = record.get("teamlead");
		team_lead_first = team_lead.get("first_name");
		team_lead_last = team_lead.get("last_name");
		if(team_lead_last != null && team_lead_last.trim() != "")
		{
			team_lead_full = team_lead_first.trim() + " " + team_lead_last.trim();
		}
		else
		{
			team_lead_full = team_lead_first.trim();
		}
		mem_full = List();
		for each  member in team_members
		{
			member_first = member.get("first_name");
			member_last = member.get("last_name");
			if(member_last != null && member_last.trim() != "")
			{
				member_full = member_first.trim() + " " + member_last.trim();
			}
			else
			{
				member_full = member_first.trim();
			}
			mem_full.add(member_full);
		}
		row.put("Project ID",project_id);
		row.put("Project Name",project_name);
		row.put("Category",category);
		row.put("Client",client);
		row.put("Team Lead",team_lead_full);
		row.put("Team Members",mem_full);
		row.put("Total Hours",total_hours);
		row.put("Status",status);
		row.put("Total Budget",total_budget);
		row.put("Product Cost",product_cost);
		row.put("Labor Cost",labor_cost);
		row.put("Start Date",start_date);
		row.put("Due Date",due_date);
		row.put("Description",description);
		rows.add(row);
	}
	// form = {"type":"form","title":"Update Project","theme":"modern-inline","fields":{{"name":"project_id","label":"Project ID","value":project_id,"type":"text"},{"name":"project_name","label":"Project Name","value":project_name,"type":"text"},{"name":"client_label","label":"Client","value":client_label,"type":"text"},{"name":"total_hours","label":"Total Hours","value":total_hours,"type":"text"},{"name":"status_label","label":"Status","value":status_label,"type":"text"},{"name":"total_budget","label":"Total Budget","value":total_budget,"type":"text"},{"name":"start_date","label":"Start Date","value":start_date,"type":"text"},{"name":"due_date","label":"Due Date","value":due_date,"type":"text"}},"buttons":{{"label":"Save","type":"+","action":{"type":"invoke.function","data":{"name":"saveUpdateProject"},"arguments":{"project_id":project_id,"project_name":project_name,"client_label":client_label,"total_hours":total_hours,"status_label":status_label,"total_budget":total_budget,"start_date":start_date,"due_date":due_date}}}}};
	response.put("type","form");
	response.put("title","Update Project Details");
	response.put("name","projectupdatewidget");
	response.put("hint","Update the project details below");
	response.put("button_label","Update");
	inputsList = list();
	inputsList0 = Map();
	inputsList0.put("label","Project ID");
	inputsList0.put("name","projectid");
	inputsList0.put("value",project_id);
	inputsList0.put("placeholder","Enter project id");
	inputsList0.put("hint","Project ID cannot be updated");
	inputsList0.put("mandatory",false);
	inputsList0.put("type","number");
	inputsList.add(inputsList0);
	inputsList1 = Map();
	inputsList1.put("label","Project Name");
	inputsList1.put("name","projectname");
	inputsList1.put("value",project_name);
	inputsList1.put("placeholder","Enter project name");
	inputsList1.put("mandatory",true);
	inputsList1.put("type","text");
	inputsList.add(inputsList1);
	inputsList2 = Map();
	inputsList2.put("label","Category");
	inputsList2.put("name","category");
	// 	inputsList2.put("value", category_value);
	inputsList2.put("mandatory",false);
	inputsList2.put("type","radio");
	optionsList = list();
	optionsList0 = Map();
	optionsList0.put("value","work");
	optionsList0.put("label","Work");
	optionsList.add(optionsList0);
	optionsList1 = Map();
	optionsList1.put("value","personal");
	optionsList1.put("label","Personal");
	optionsList.add(optionsList1);
	inputsList2.put("options",optionsList);
	inputsList.add(inputsList2);
	// 	inputsList3 = Map();
	// 	inputsList3.put("label","Client");
	// 	inputsList3.put("name","client");
	// 	inputsList3.put("value", client);
	// 	inputsList3.put("placeholder","Choose from the list of options");
	// 	inputsList3.put("multiple",false);
	// 	inputsList3.put("mandatory",false);
	// 	inputsList3.put("type","select");
	// 	optionsList = list();
	// 	optionsList0 = Map();
	// 	optionsList0.put("value","clienta");
	// 	optionsList0.put("label","Client A");
	// 	optionsList.add(optionsList0);
	// 	optionsList1 = Map();
	// 	optionsList1.put("value","clientb");
	// 	optionsList1.put("label","Client B");
	// 	optionsList.add(optionsList1);
	// 	optionsList2 = Map();
	// 	optionsList2.put("value","organisationa");
	// 	optionsList2.put("label","Organisation A");
	// 	optionsList.add(optionsList2);
	// 	optionsList3 = Map();
	// 	optionsList3.put("value","organisationb");
	// 	optionsList3.put("label","Organisation B");
	// 	optionsList.add(optionsList3);
	// 	inputsList3.put("options",optionsList);
	// 	inputsList.add(inputsList3);
	inputsList3 = Map();
	inputsList3.put("label","Client");
	inputsList3.put("name","client");
	// inputsList3.put("value", client);
	inputsList3.put("placeholder","Choose from the list of options");
	inputsList3.put("multiple",false);
	inputsList3.put("mandatory",false);
	inputsList3.put("type","select");
	query_map = Map();
	criteria_string = "regno>=0";
	query_map.put("criteria",criteria_string);
	response_map = zoho.cliq.getRecords("contactdb",query_map);
	optionsList = list();
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("list").size() > 0)
	{
		records = response_map.get("list");
		for each  record in records
		{
			option = Map();
			option.put("value",record.get("name").toLowerCase().replaceAll(" ",""));
			option.put("label",record.get("name"));
			optionsList.add(option);
		}
	}
	else
	{
		option = Map();
		option.put("value","noclient");
		option.put("label","No Clients Available");
		optionsList.add(option);
	}
	inputsList3.put("options",optionsList);
	inputsList.add(inputsList3);
	inputsList4 = Map();
	inputsList4.put("label","Start Date");
	inputsList4.put("name","startdate");
	inputsList4.put("value",start_date);
	inputsList4.put("placeholder","Choose start date");
	inputsList4.put("mandatory",false);
	inputsList4.put("type","date");
	inputsList.add(inputsList4);
	inputsList5 = Map();
	inputsList5.put("label","Due Date");
	inputsList5.put("name","duedate");
	inputsList5.put("value",due_date);
	inputsList5.put("placeholder","Choose due date");
	inputsList5.put("mandatory",false);
	inputsList5.put("type","date");
	inputsList.add(inputsList5);
	inputsList6 = Map();
	inputsList6.put("label","Status");
	inputsList6.put("name","status");
	// inputsList6.put("value", status);
	inputsList6.put("placeholder","Choose from the list of options");
	inputsList6.put("multiple",false);
	inputsList6.put("mandatory",false);
	inputsList6.put("type","select");
	optionsList = list();
	optionsList0 = Map();
	optionsList0.put("value","inprogress");
	optionsList0.put("label","In Progress");
	optionsList.add(optionsList0);
	optionsList1 = Map();
	optionsList1.put("value","onhold");
	optionsList1.put("label","On Hold");
	optionsList.add(optionsList1);
	optionsList2 = Map();
	optionsList2.put("value","pending");
	optionsList2.put("label","Pending");
	optionsList.add(optionsList2);
	optionsList3 = Map();
	optionsList3.put("value","canceled");
	optionsList3.put("label","Canceled");
	optionsList.add(optionsList3);
	optionsList4 = Map();
	optionsList4.put("value","completed");
	optionsList4.put("label","Completed");
	optionsList.add(optionsList4);
	optionsList5 = Map();
	optionsList5.put("value","tentative");
	optionsList5.put("label","Tentative");
	optionsList.add(optionsList5);
	inputsList6.put("options",optionsList);
	inputsList.add(inputsList6);
	inputsList7 = Map();
	inputsList7.put("label","Team Lead");
	inputsList7.put("name","teamlead");
	// 	inputsList7.put("value", team_lead_full);
	inputsList7.put("placeholder","Choose a lead from your team");
	inputsList7.put("multiple",false);
	inputsList7.put("mandatory",false);
	inputsList7.put("type","native_select");
	inputsList7.put("data_source","contacts");
	inputsList.add(inputsList7);
	inputsList8 = Map();
	inputsList8.put("label","Team Members");
	inputsList8.put("name","teammembers");
	// 	inputsList8.put("value", team_members);
	inputsList8.put("placeholder","Choose members from your team");
	inputsList8.put("multiple",true);
	inputsList8.put("mandatory",false);
	inputsList8.put("type","native_select");
	inputsList8.put("data_source","contacts");
	inputsList.add(inputsList8);
	inputsList9 = Map();
	inputsList9.put("label","Total Hours");
	inputsList9.put("name","totalhours");
	inputsList9.put("value",total_hours);
	inputsList9.put("placeholder","Enter expected time to complete the project");
	inputsList9.put("mandatory",false);
	inputsList9.put("type","number");
	inputsList.add(inputsList9);
	inputsList10 = Map();
	inputsList10.put("label","Total Budget");
	inputsList10.put("name","totalbudget");
	inputsList10.put("value",total_budget);
	inputsList10.put("placeholder","Enter expected budget to complete the project");
	inputsList10.put("mandatory",false);
	inputsList10.put("type","number");
	inputsList.add(inputsList10);
	inputsList11 = Map();
	inputsList11.put("label","Labor Cost");
	inputsList11.put("name","laborcost");
	inputsList11.put("value",labor_cost);
	inputsList11.put("placeholder","Enter labor cost to complete the project");
	inputsList11.put("mandatory",false);
	inputsList11.put("type","number");
	inputsList.add(inputsList11);
	inputsList12 = Map();
	inputsList12.put("label","Product Cost");
	inputsList12.put("name","productcost");
	inputsList12.put("value",product_cost);
	inputsList12.put("placeholder","Enter product cost to complete the project");
	inputsList12.put("mandatory",false);
	inputsList12.put("type","number");
	inputsList.add(inputsList12);
	inputsList13 = Map();
	inputsList13.put("label","Description");
	inputsList13.put("name","description");
	inputsList13.put("value",description);
	inputsList13.put("placeholder","Deliver an insight about the project");
	inputsList13.put("mandatory",false);
	inputsList13.put("type","textarea");
	inputsList.add(inputsList13);
	response.put("inputs",inputsList);
	action = Map();
	action.put("type","invoke.function");
	action.put("name","formsubmit");
	response.put("action",action);
	return response;
}
else if(target.get("id").right(20) == "projectdisplaywidget")
{
	val_ind = target.get("id").indexOf(" ");
	recordid = target.get("id").subText(0,val_ind);
	info recordid;
	response_map = zoho.cliq.getRecordById("projectdb",recordid);
	rows = list();
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("object") != null)
	{
		row = Map();
		record = response_map.get("object");
		project_id = record.get("projectid");
		project_name = record.get("projectname");
		category = record.get("category").get("label");
		// 		category_label = category.get("label");
		client = record.get("client").get("label");
		// 		client_label = client.get("label");
		total_hours = record.get("totalhours");
		status = record.get("status").get("label");
		// 		status_label = status.get("label");
		total_budget = record.get("totalbudget");
		due_date = record.get("duedate");
		product_cost = record.get("productcost");
		team_members = record.get("teammembers");
		labor_cost = record.get("laborcost");
		start_date = record.get("startdate");
		description = record.get("description");
		team_lead = record.get("teamlead");
		team_lead_first = team_lead.get("first_name");
		team_lead_last = team_lead.get("last_name");
		if(team_lead_last != null && team_lead_last.trim() != "")
		{
			team_lead_full = team_lead_first.trim() + " " + team_lead_last.trim();
		}
		else
		{
			team_lead_full = team_lead_first.trim();
		}
		mem_full = List();
		for each  member in team_members
		{
			member_first = member.get("first_name");
			member_last = member.get("last_name");
			if(member_last != null && member_last.trim() != "")
			{
				member_full = member_first.trim() + " " + member_last.trim();
			}
			else
			{
				member_full = member_first.trim();
			}
			mem_full.add(member_full);
		}
		row.put("Project ID",project_id);
		row.put("Project Name",project_name);
		row.put("Category",category);
		row.put("Client",client);
		row.put("Team Lead",team_lead_full);
		row.put("Team Members",mem_full);
		row.put("Total Hours",total_hours);
		row.put("Status",status);
		row.put("Total Budget",total_budget);
		row.put("Product Cost",product_cost);
		row.put("Labor Cost",labor_cost);
		row.put("Start Date",start_date);
		row.put("Due Date",due_date);
		row.put("Description",description);
		rows.add(row);
	}
	header = {"title":"Project Details","buttons":{{"label":"Back","type":"invoke.function","name":"widgetForm","id":"backarchives"}}};
	sections = list();
	elements1 = list();
	elements1.add({"type":"table","headers":{"Project ID","Project Name","Category","Client","Total Hours","Total Budget","Status","Start Date","Due Date"},"rows":{{"Project ID":project_id,"Project Name":project_name,"Category":category,"Client":client,"Total Hours":total_hours,"Total Budget":total_budget,"Status":status,"Start Date":start_date,"Due Date":due_date}},"style":{"width":{"10","10","10"},"text_align":{"center","center","center"}}});
	sections.add({"id":1,"elements":elements1});
	elements2 = list();
	project_details = "Project ID:   " + project_id + "\n\n" + "Project Name:   " + project_name + "\n\n" + "Client:  " + client + "\n\n" + "Team Lead:  " + team_lead_full + "\n\n" + "Team Members:  " + mem_full + "\n\n" + "Total Budget:  " + total_budget + "\n\n" + "Product Cost:  " + product_cost + "\n\n" + "Labor Cost:  " + labor_cost + "\n\n" + "Description:  " + description + "\n\n";
	elements2.add({"type":"text","text":project_details});
	sections.add({"id":2,"elements":elements2});
	return {"type":"applet","tabs":{{"label":"Archives","id":"archives"}},"active_tab":"archives","sections":sections,"header":header};
}
else if(target.get("id").right(15) == "quoteeditwidget")
{
	val_ind = target.get("id").indexOf(" ");
	recordid = target.get("id").subText(0,val_ind);
	response_map = zoho.cliq.getRecordById("quotedb",recordid);
	rows = list();
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("object") != null)
	{
		row = Map();
		record = response_map.get("object");
		project_id = record.get("projectid");
		date_of_issue = record.get("dateofissue");
		quote_no = record.get("quoteno");
		client = record.get("client").get("label");
		// 	client_value = client.get("label");
		tax_value = record.get("taxvalue");
		quantity = record.get("quantity");
		close_date = record.get("closedate");
		duration = record.get("duration");
		status = record.get("status").get("label");
		// 	status_label = status.get("label");
		comment = record.get("comment");
		due_date = record.get("duedate");
		unit_price = record.get("unitprice");
		product = record.get("product");
		discount = record.get("discount");
		row.put("Project ID",project_id);
		row.put("Date of Issue",date_of_issue);
		row.put("Quote No",quote_no);
		row.put("Client",client);
		row.put("Tax Value",tax_value);
		row.put("Quantity",quantity);
		row.put("Close Date",close_date);
		row.put("Duration",duration);
		row.put("Status",status);
		row.put("Comment",comment);
		row.put("Due Date",due_date);
		row.put("Unit Price",unit_price);
		row.put("Product",product);
		row.put("Discount",discount);
		rows.add(row);
	}
	response.put("type","form");
	response.put("title","Update Quote Details");
	response.put("name","quoteupdatewidget");
	response.put("hint","Update the quote details below");
	response.put("button_label","Update");
	inputsList = list();
	inputsList0 = Map();
	inputsList0.put("label","Project ID");
	inputsList0.put("name","projectid");
	inputsList0.put("value",project_id);
	inputsList0.put("placeholder","Enter project id");
	// inputsList0.put("min","0");
	// inputsList0.put("max","100");
	inputsList0.put("mandatory",true);
	inputsList0.put("type","number");
	inputsList.add(inputsList0);
	inputsList1 = Map();
	inputsList1.put("label","Quote No. ");
	inputsList1.put("name","quoteno");
	inputsList1.put("value",quote_no);
	inputsList1.put("placeholder","Enter quote no.");
	inputsList1.put("hint","Quote No cannot be updated");
	inputsList1.put("min_length","0");
	inputsList1.put("max_length","25");
	inputsList1.put("mandatory",true);
	inputsList1.put("type","text");
	inputsList.add(inputsList1);
	inputsList2 = Map();
	inputsList2.put("label","Client");
	inputsList2.put("name","client");
	inputsList2.put("placeholder","Choose from the list of options");
	inputsList2.put("multiple",false);
	inputsList2.put("mandatory",false);
	inputsList2.put("type","select");
	query_map = Map();
	criteria_string = "regno>=0";
	query_map.put("criteria",criteria_string);
	response_map = zoho.cliq.getRecords("contactdb",query_map);
	optionsList = list();
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("list").size() > 0)
	{
		records = response_map.get("list");
		for each  record in records
		{
			option = Map();
			option.put("value",record.get("name").toLowerCase().replaceAll(" ",""));
			option.put("label",record.get("name"));
			optionsList.add(option);
		}
	}
	else
	{
		option = Map();
		option.put("value","noclient");
		option.put("label","No Clients Available");
		optionsList.add(option);
	}
	inputsList2.put("options",optionsList);
	inputsList.add(inputsList2);
	// 	inputsList2 = Map();
	// 	inputsList2.put("label","Client");
	// 	inputsList2.put("name","client");
	// 	inputsList2.put("placeholder","Choose from the list of options");
	// 	inputsList2.put("multiple",false);
	// 	inputsList2.put("mandatory",true);
	// 	inputsList2.put("type","select");
	// 	optionsList = list();
	// 	optionsList0 = Map();
	// 	optionsList0.put("value","clienta");
	// 	optionsList0.put("label","Client A");
	// 	optionsList.add(optionsList0);
	// 	optionsList1 = Map();
	// 	optionsList1.put("value","clientb");
	// 	optionsList1.put("label","Client B");
	// 	optionsList.add(optionsList1);
	// 	optionsList2 = Map();
	// 	optionsList2.put("value","organisationa");
	// 	optionsList2.put("label","Organisation A");
	// 	optionsList.add(optionsList2);
	// 	optionsList3 = Map();
	// 	optionsList3.put("value","organisationb");
	// 	optionsList3.put("label","Organisation B");
	// 	optionsList.add(optionsList3);
	// 	inputsList2.put("options",optionsList);
	// 	inputsList.add(inputsList2);
	inputsList3 = Map();
	inputsList3.put("label","Date of Issue");
	inputsList3.put("name","dateofissue");
	inputsList3.put("value",date_of_issue);
	inputsList3.put("placeholder","Enter date of issue");
	inputsList3.put("mandatory",false);
	inputsList3.put("type","date");
	inputsList.add(inputsList3);
	inputsList4 = Map();
	inputsList4.put("label","Comment");
	inputsList4.put("name","comment");
	inputsList4.put("value",comment);
	inputsList4.put("placeholder","Deliver the update or insight of the project");
	// inputsList4.put("min_length","0");
	// inputsList4.put("max_length","25");
	inputsList4.put("mandatory",false);
	inputsList4.put("type","textarea");
	inputsList.add(inputsList4);
	inputsList5 = Map();
	inputsList5.put("label","Product | Service");
	inputsList5.put("name","product");
	inputsList5.put("value",product);
	inputsList5.put("placeholder","Enter product or service description");
	// inputsList5.put("min_length","0");
	// inputsList5.put("max_length","25");
	inputsList5.put("mandatory",false);
	inputsList5.put("type","text");
	inputsList.add(inputsList5);
	inputsList6 = Map();
	inputsList6.put("label","Quantity");
	inputsList6.put("name","quantity");
	inputsList6.put("value",quantity);
	inputsList6.put("placeholder","Enter quantity");
	// inputsList6.put("min","0");
	// inputsList6.put("max","100");
	inputsList6.put("mandatory",false);
	inputsList6.put("type","number");
	inputsList.add(inputsList6);
	inputsList7 = Map();
	inputsList7.put("label","Unit Price");
	inputsList7.put("name","unitprice");
	inputsList7.put("value",unit_price);
	inputsList7.put("placeholder","Enter unit price value");
	// inputsList7.put("min","0");
	// inputsList7.put("max","100");
	inputsList7.put("mandatory",false);
	inputsList7.put("type","number");
	inputsList.add(inputsList7);
	inputsList8 = Map();
	inputsList8.put("label","Discount");
	inputsList8.put("name","discount");
	inputsList8.put("value",discount);
	inputsList8.put("placeholder","Enter discount (in %)");
	// inputsList8.put("min","0");
	// inputsList8.put("max","100");
	inputsList8.put("mandatory",false);
	inputsList8.put("type","number");
	inputsList.add(inputsList8);
	inputsList9 = Map();
	inputsList9.put("label","Tax Value");
	inputsList9.put("name","taxvalue");
	inputsList9.put("value",tax_value);
	inputsList9.put("placeholder","Enter tax value (in %)");
	// inputsList9.put("min","0");
	// inputsList9.put("max","100");
	inputsList9.put("mandatory",false);
	inputsList9.put("type","number");
	inputsList.add(inputsList9);
	inputsList10 = Map();
	inputsList10.put("label","Due Date");
	inputsList10.put("name","duedate");
	inputsList10.put("value",due_date);
	inputsList10.put("placeholder","Enter due date");
	inputsList10.put("mandatory",false);
	inputsList10.put("type","date");
	inputsList.add(inputsList10);
	inputsList11 = Map();
	inputsList11.put("label","Estimated Closing Date");
	inputsList11.put("name","closedate");
	inputsList11.put("value",close_date);
	inputsList11.put("placeholder","Enter estimated closing date");
	inputsList11.put("mandatory",false);
	inputsList11.put("type","date");
	inputsList.add(inputsList11);
	inputsList12 = Map();
	inputsList12.put("label","Estimated duration");
	inputsList12.put("name","duration");
	inputsList12.put("value",duration);
	inputsList12.put("placeholder","Enter estimated duration (in hours)");
	// inputsList12.put("min_length","0");
	// inputsList12.put("max_length","25");
	inputsList12.put("mandatory",false);
	inputsList12.put("type","text");
	inputsList.add(inputsList12);
	inputsList13 = Map();
	inputsList13.put("label","Status");
	inputsList13.put("name","status");
	inputsList13.put("placeholder","Choose from the list of options");
	inputsList13.put("multiple",false);
	inputsList13.put("mandatory",false);
	inputsList13.put("type","select");
	optionsList = list();
	optionsList0 = Map();
	optionsList0.put("value","opportunity");
	optionsList0.put("label","Opportunity");
	optionsList.add(optionsList0);
	optionsList1 = Map();
	optionsList1.put("value","scoping");
	optionsList1.put("label","Scoping");
	optionsList.add(optionsList1);
	optionsList2 = Map();
	optionsList2.put("value","proposal");
	optionsList2.put("label","Proposal");
	optionsList.add(optionsList2);
	optionsList3 = Map();
	optionsList3.put("value","confirmed");
	optionsList3.put("label","Confirmed");
	optionsList.add(optionsList3);
	optionsList4 = Map();
	optionsList4.put("value","rejected");
	optionsList4.put("label","Rejected");
	optionsList.add(optionsList4);
	optionsList5 = Map();
	optionsList5.put("value","expired");
	optionsList5.put("label","Expired");
	optionsList.add(optionsList5);
	optionsList6 = Map();
	optionsList6.put("value","completed");
	optionsList6.put("label","Completed");
	optionsList.add(optionsList6);
	inputsList13.put("options",optionsList);
	inputsList.add(inputsList13);
	response.put("inputs",inputsList);
	action = Map();
	action.put("type","invoke.function");
	action.put("name","formsubmit");
	response.put("action",action);
	return response;
}
else if(target.get("id").right(18) == "quotedisplaywidget")
{
	val_ind = target.get("id").indexOf(" ");
	recordid = target.get("id").subText(0,val_ind);
	info recordid;
	response_map = zoho.cliq.getRecordById("quotedb",recordid);
	rows = list();
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("object") != null)
	{
		row = Map();
		record = response_map.get("object");
		project_id = record.get("projectid");
		date_of_issue = record.get("dateofissue");
		quote_no = record.get("quoteno");
		client = record.get("client").get("label");
		// 	client_value = client.get("label");
		tax_value = record.get("taxvalue");
		quantity = record.get("quantity");
		close_date = record.get("closedate");
		duration = record.get("duration");
		status = record.get("status").get("label");
		// 	status_label = status.get("label");
		comment = record.get("comment");
		due_date = record.get("duedate");
		unit_price = record.get("unitprice");
		product = record.get("product");
		discount = record.get("discount");
		row.put("Project ID",project_id);
		row.put("Date of Issue",date_of_issue);
		row.put("Quote No",quote_no);
		row.put("Client",client);
		row.put("Tax Value",tax_value);
		row.put("Quantity",quantity);
		row.put("Close Date",close_date);
		row.put("Duration",duration);
		row.put("Status",status);
		row.put("Comment",comment);
		row.put("Due Date",due_date);
		row.put("Unit Price",unit_price);
		row.put("Product",product);
		row.put("Discount",discount);
		rows.add(row);
	}
	header = {"title":"Quote Details","buttons":{{"label":"Back","type":"invoke.function","name":"widgetForm","id":"backarchives"}}};
	sections = list();
	elements1 = list();
	elements1.add({"type":"table","headers":{"Project ID","Quote No","Date of Issue","Tax Value","Quantity","Close Date","Duration","Unit Price","Discount"},"rows":{{"Project ID":project_id,"Quote No":quote_no,"Date of Issue":date_of_issue,"Tax Value":tax_value,"Quantity":quantity,"Close Date":close_date,"Duration":duration,"Unit Price":unit_price,"Discount":discount}},"style":{"width":{"10","10","10"},"text_align":{"center","center","center"}}});
	sections.add({"id":1,"elements":elements1});
	elements2 = list();
	quote_details = "Project ID:   " + project_id + "\n\n" + "Date of Issue:   " + date_of_issue + "\n\n" + "Client:  " + client + "\n\n" + "Status:  " + status + "\n\n" + "Comment:  " + comment + "\n\n" + "Due Date:  " + due_date + "\n\n" + "Product:  " + product + "\n\n" + "Discount:  " + discount + "\n\n" + "Quantity:  " + quantity + "\n\n";
	elements2.add({"type":"text","text":quote_details});
	sections.add({"id":2,"elements":elements2});
	return {"type":"applet","tabs":{{"label":"Archives","id":"archives"}},"active_tab":"archives","sections":sections,"header":header};
}
else if(target.get("id").right(17) == "invoiceeditwidget")
{
	val_ind = target.get("id").indexOf(" ");
	recordid = target.get("id").subText(0,val_ind);
	info recordid;
	response_map = zoho.cliq.getRecordById("invoicedb",recordid);
	rows = list();
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("object") != null)
	{
		row = Map();
		record = response_map.get("object");
		project_id = record.get("projectid");
		date_of_issue = record.get("dateofissue");
		payer = record.get("payer").get("label");
		// 		payer_value = payer.get("label");
		tax_value = record.get("taxvalue");
		quantity = record.get("quantity");
		author = record.get("author").get("label");
		// 		author_value = author.get("label");
		comment = record.get("comment");
		due_date = record.get("duedate");
		overdue = record.get("overdue");
		paymentmethod = record.get("paymentmethod").get("label");
		// 		paymentmethod_label = paymentmethod.get("label");
		invoice_no = record.get("invoiceno");
		unit_price = record.get("unitprice");
		product = record.get("product");
		discount = record.get("discount");
		row.put("Project ID",project_id);
		row.put("Date of Issue",date_of_issue);
		row.put("Payer",payer);
		row.put("Tax Value",tax_value);
		row.put("Quantity",quantity);
		row.put("Author",author);
		row.put("Comment",comment);
		row.put("Due Date",due_date);
		row.put("Overdue",overdue);
		row.put("Payment Method",paymentmethod);
		row.put("Invoice No",invoice_no);
		row.put("Unit Price",unit_price);
		row.put("Product",product);
		row.put("Discount",discount);
		rows.add(row);
	}
	// quantity = portalproject_components.get(3);
	// due_date = portalproject_components.get(4);
	// overdue = portalproject_components.get(5);
	// invoice_no = portalproject_components.get(6);
	// unit_price = portalproject_components.get(7);
	response.put("type","form");
	response.put("title","Update Invoice Details");
	response.put("name","invoiceupdatewidget");
	response.put("hint","Update the invoice details below");
	response.put("button_label","Update");
	inputsList = list();
	inputsList0 = Map();
	inputsList0.put("label","Project ID");
	inputsList0.put("name","projectid");
	inputsList0.put("value",project_id);
	inputsList0.put("placeholder","Enter project id");
	// inputsList0.put("min","0");
	// inputsList0.put("max","100");
	inputsList0.put("mandatory",true);
	inputsList0.put("type","number");
	inputsList.add(inputsList0);
	inputsList1 = Map();
	inputsList1.put("label","Invoice No.");
	inputsList1.put("name","invoiceno");
	inputsList1.put("value",invoice_no);
	inputsList1.put("placeholder","Enter invoice no.");
	inputsList1.put("hint","Invoice No cannot be updated");
	// inputsList1.put("min_length","0");
	// inputsList1.put("max_length","25");
	inputsList1.put("mandatory",true);
	inputsList1.put("type","text");
	inputsList.add(inputsList1);
	inputsList2 = Map();
	inputsList2.put("label","Author");
	inputsList2.put("name","author");
	inputsList2.put("placeholder","Enter author name");
	inputsList2.put("multiple",false);
	inputsList2.put("mandatory",false);
	inputsList2.put("type","native_select");
	inputsList2.put("data_source","contacts");
	inputsList.add(inputsList2);
	inputsList3 = Map();
	inputsList3.put("label","Date of Issue");
	inputsList3.put("name","dateofissue");
	inputsList3.put("value",date_of_issue);
	inputsList3.put("placeholder","Enter date of issue");
	inputsList3.put("mandatory",true);
	inputsList3.put("type","date");
	inputsList.add(inputsList3);
	inputsList4 = Map();
	inputsList4.put("label","Due Date");
	inputsList4.put("name","duedate");
	inputsList4.put("value",due_date);
	inputsList4.put("placeholder","Enter due date (in days)");
	// inputsList4.put("min_length","0");
	// inputsList4.put("max_length","25");
	inputsList4.put("mandatory",true);
	inputsList4.put("type","text");
	inputsList.add(inputsList4);
	inputsList5 = Map();
	inputsList5.put("label","Payer");
	inputsList5.put("name","payer");
	inputsList5.put("placeholder","Choose from the list of options");
	inputsList5.put("multiple",false);
	inputsList5.put("mandatory",false);
	inputsList5.put("type","select");
	query_map = Map();
	criteria_string = "regno>=0";
	query_map.put("criteria",criteria_string);
	response_map = zoho.cliq.getRecords("contactdb",query_map);
	optionsList = list();
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("list").size() > 0)
	{
		records = response_map.get("list");
		for each  record in records
		{
			option = Map();
			option.put("value",record.get("name").toLowerCase().replaceAll(" ",""));
			option.put("label",record.get("name"));
			optionsList.add(option);
		}
	}
	else
	{
		option = Map();
		option.put("value","noclient");
		option.put("label","No Clients Available");
		optionsList.add(option);
	}
	inputsList5.put("options",optionsList);
	inputsList.add(inputsList5);
	// 	inputsList5 = Map();
	// 	inputsList5.put("label","Payer");
	// 	inputsList5.put("name","payer");
	// 	inputsList5.put("placeholder","Choose from the list of options");
	// 	inputsList5.put("multiple",false);
	// 	inputsList5.put("mandatory",true);
	// 	inputsList5.put("type","select");
	// 	optionsList = list();
	// 	optionsList0 = Map();
	// 	optionsList0.put("value","clienta");
	// 	optionsList0.put("label","Client A");
	// 	optionsList.add(optionsList0);
	// 	optionsList1 = Map();
	// 	optionsList1.put("value","clientb");
	// 	optionsList1.put("label","Client B");
	// 	optionsList.add(optionsList1);
	// 	optionsList2 = Map();
	// 	optionsList2.put("value","organisationa");
	// 	optionsList2.put("label","Organisation A");
	// 	optionsList.add(optionsList2);
	// 	optionsList3 = Map();
	// 	optionsList3.put("value","organisationb");
	// 	optionsList3.put("label","Organisation B");
	// 	optionsList.add(optionsList3);
	// 	inputsList5.put("options",optionsList);
	// 	inputsList.add(inputsList5);
	inputsList6 = Map();
	inputsList6.put("label","Comment");
	inputsList6.put("name","comment");
	inputsList6.put("value",comment);
	inputsList6.put("placeholder","Deliver the insight of the project");
	// inputsList6.put("min_length","0");
	// inputsList6.put("max_length","25");
	inputsList6.put("mandatory",false);
	inputsList6.put("type","textarea");
	inputsList.add(inputsList6);
	inputsList7 = Map();
	inputsList7.put("label","Product | Service");
	inputsList7.put("name","product");
	inputsList7.put("value",product);
	inputsList7.put("placeholder","Enter product or service description");
	// inputsList7.put("min_length","0");
	// inputsList7.put("max_length","25");
	inputsList7.put("mandatory",false);
	inputsList7.put("type","text");
	inputsList.add(inputsList7);
	inputsList8 = Map();
	inputsList8.put("label","Quantity");
	inputsList8.put("name","quantity");
	inputsList8.put("value",quantity);
	inputsList8.put("placeholder","Enter quantity");
	// inputsList8.put("min","0");
	// inputsList8.put("max","100");
	inputsList8.put("mandatory",false);
	inputsList8.put("type","number");
	inputsList.add(inputsList8);
	inputsList9 = Map();
	inputsList9.put("label","Unit Price");
	inputsList9.put("name","unitprice");
	inputsList9.put("value",unit_price);
	inputsList9.put("placeholder","Enter unit price");
	// inputsList9.put("min","0");
	// inputsList9.put("max","100");
	inputsList9.put("mandatory",false);
	inputsList9.put("type","number");
	inputsList.add(inputsList9);
	inputsList10 = Map();
	inputsList10.put("label","Discount");
	inputsList10.put("name","discount");
	inputsList10.put("value",discount);
	inputsList10.put("placeholder","Enter discount (in %)");
	// inputsList10.put("min","0");
	// inputsList10.put("max","100");
	inputsList10.put("mandatory",false);
	inputsList10.put("type","number");
	inputsList.add(inputsList10);
	inputsList11 = Map();
	inputsList11.put("label","Tax Value");
	inputsList11.put("name","taxvalue");
	inputsList11.put("value",tax_value);
	inputsList11.put("placeholder","Enter tax value (in %)");
	// inputsList11.put("min","0");
	// inputsList11.put("max","100");
	inputsList11.put("mandatory",false);
	inputsList11.put("type","number");
	inputsList.add(inputsList11);
	inputsList12 = Map();
	inputsList12.put("label","Payment Method");
	inputsList12.put("name","paymentmethod");
	inputsList12.put("placeholder","Choose from the list of options");
	inputsList12.put("multiple",false);
	inputsList12.put("mandatory",false);
	inputsList12.put("type","select");
	optionsList = list();
	optionsList0 = Map();
	optionsList0.put("value","banktransfer");
	optionsList0.put("label","Bank Transfer");
	optionsList.add(optionsList0);
	optionsList1 = Map();
	optionsList1.put("value","cash");
	optionsList1.put("label","Cash");
	optionsList.add(optionsList1);
	optionsList2 = Map();
	optionsList2.put("value","cardpayment");
	optionsList2.put("label","Card Payment");
	optionsList.add(optionsList2);
	optionsList3 = Map();
	optionsList3.put("value","barter");
	optionsList3.put("label","Barter");
	optionsList.add(optionsList3);
	optionsList4 = Map();
	optionsList4.put("value","credit");
	optionsList4.put("label","Credit");
	optionsList.add(optionsList4);
	optionsList5 = Map();
	optionsList5.put("value","check");
	optionsList5.put("label","Check");
	optionsList.add(optionsList5);
	inputsList12.put("options",optionsList);
	inputsList.add(inputsList12);
	inputsList13 = Map();
	inputsList13.put("label","Overdue Interest");
	inputsList13.put("name","overdue");
	inputsList13.put("value",overdue);
	inputsList13.put("placeholder","Enter overdue interest (in %)");
	// inputsList13.put("min","0");
	// inputsList13.put("max","100");
	inputsList13.put("mandatory",false);
	inputsList13.put("type","number");
	inputsList.add(inputsList13);
	response.put("inputs",inputsList);
	action = Map();
	action.put("type","invoke.function");
	action.put("name","formsubmit");
	response.put("action",action);
	return response;
}
else if(target.get("id").right(20) == "invoicedisplaywidget")
{
	val_ind = target.get("id").indexOf(" ");
	recordid = target.get("id").subText(0,val_ind);
	info recordid;
	response_map = zoho.cliq.getRecordById("invoicedb",recordid);
	rows = list();
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("object") != null)
	{
		row = Map();
		record = response_map.get("object");
		project_id = record.get("projectid");
		date_of_issue = record.get("dateofissue");
		payer = record.get("payer").get("label");
		// 		payer_value = payer.get("label");
		tax_value = record.get("taxvalue");
		quantity = record.get("quantity");
		author = record.get("author");
		author_first = author.get("first_name");
		author_last = author.get("last_name");
		if(author_last != null && author_last.trim() != "")
		{
			author_full = author_first.trim() + " " + author_last.trim();
		}
		else
		{
			author_full = author_first.trim();
		}
		// 		author_value = author.get("label");
		comment = record.get("comment");
		due_date = record.get("duedate");
		overdue = record.get("overdue");
		paymentmethod = record.get("paymentmethod").get("label");
		// 		paymentmethod_label = paymentmethod.get("label");
		invoice_no = record.get("invoiceno");
		unit_price = record.get("unitprice");
		product = record.get("product");
		discount = record.get("discount");
		row.put("Project ID",project_id);
		row.put("Invoice No",invoice_no);
		row.put("Date of Issue",date_of_issue);
		row.put("Payer",payer);
		row.put("Tax Value",tax_value);
		row.put("Quantity",quantity);
		row.put("Author",author_full);
		row.put("Comment",comment);
		row.put("Due Date",due_date);
		row.put("Overdue",overdue);
		row.put("Payment Method",paymentmethod);
		row.put("Unit Price",unit_price);
		row.put("Product",product);
		row.put("Discount",discount);
		rows.add(row);
	}
	header = {"title":"Invoice Details","buttons":{{"label":"Back","type":"invoke.function","name":"widgetForm","id":"backarchives"}}};
	sections = list();
	elements1 = list();
	elements1.add({"type":"table","headers":{"Project ID","Invoice No","Date of Issue","Tax Value","Quantity","Due Date","Overdue Interest","Unit Price","Discount"},"rows":{{"Project ID":project_id,"Invoice No":invoice_no,"Date of Issue":date_of_issue,"Tax Value":tax_value,"Quantity":quantity,"Due Date":due_date,"Overdue Interest":overdue,"Unit Price":unit_price,"Discount":discount}},"style":{"width":{"10","10","10"},"text_align":{"center","center","center"}}});
	sections.add({"id":1,"elements":elements1});
	elements2 = list();
	invoice_details = "Project ID:   " + project_id + "\n\n" + "Invoice No:   " + invoice_no + "\n\n" + "Payer:  " + payer + "\n\n" + "Author:  " + author_full + "\n\n" + "Comment:  " + comment + "\n\n" + "Payment Method:  " + paymentmethod + "\n\n" + "Product:  " + product + "\n\n" + "Date of Issue:  " + date_of_issue + "\n\n" + "Tax Value:  " + tax_value + "\n\n";
	elements2.add({"type":"text","text":invoice_details});
	sections.add({"id":2,"elements":elements2});
	return {"type":"applet","tabs":{{"label":"Archives","id":"archives"}},"active_tab":"archives","sections":sections,"header":header};
}
else if(target.get("id").right(14) == "billeditwidget")
{
	val_ind = target.get("id").indexOf(" ");
	recordid = target.get("id").subText(0,val_ind);
	info recordid;
	response_map = zoho.cliq.getRecordById("billsdb",recordid);
	rows = list();
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("object") != null)
	{
		row = Map();
		record = response_map.get("object");
		project_id = record.get("projectid");
		date_of_issue = record.get("dateofissue");
		tax = record.get("tax");
		quantity = record.get("quantity");
		due_date = record.get("duedate");
		bill_no = record.get("billno");
		unit_price = record.get("unitprice");
		price_list = record.get("pricelist").get("label");
		comment = record.get("comment");
		issuer = record.get("issuer");
		issuer_first = issuer.get("first_name");
		issuer_last = issuer.get("last_name");
		if(issuer_last != null && issuer_last.trim() != "")
		{
			issuer_full = issuer_first.trim() + " " + issuer_last.trim();
		}
		else
		{
			issuer_full = issuer_first.trim();
		}
		paymentmethod = record.get("paymentmethod").get("label");
		recipient = record.get("recipient").get("label");
		product = record.get("product");
		discount = record.get("discount");
		row.put("Project ID",project_id);
		row.put("Date of Issue",date_of_issue);
		row.put("Tax",tax);
		row.put("Quantity",quantity);
		row.put("Due Date",due_date);
		row.put("Bill No",bill_no);
		row.put("Unit Price",unit_price);
		row.put("Price List",price_list);
		row.put("Comment",comment);
		row.put("Issuer",issuer_full);
		row.put("Payment Method",paymentmethod);
		row.put("Recipient",recipient);
		row.put("Product",product);
		row.put("Discount",discount);
		rows.add(row);
	}
	response.put("type","form");
	response.put("title","Bill Details");
	response.put("name","billupdatewidget");
	response.put("hint","Update the bill details below");
	response.put("button_label","Update");
	inputsList = list();
	inputsList0 = Map();
	inputsList0.put("label","Project ID");
	inputsList0.put("name","projectid");
	inputsList0.put("value",project_id);
	inputsList0.put("placeholder","Enter project id");
	// inputsList0.put("min","0");
	// inputsList0.put("max","100");
	inputsList0.put("mandatory",true);
	inputsList0.put("type","number");
	inputsList.add(inputsList0);
	inputsList1 = Map();
	inputsList1.put("label","Bill No.");
	inputsList1.put("name","billno");
	inputsList1.put("value",bill_no);
	inputsList1.put("placeholder","Enter bill number");
	inputsList1.put("hint","Bill No cannot be updated");
	// inputsList1.put("min","0");
	// inputsList1.put("max","100");
	inputsList1.put("mandatory",true);
	inputsList1.put("type","number");
	inputsList.add(inputsList1);
	inputsList2 = Map();
	inputsList2.put("label","Recipient");
	inputsList2.put("name","recipient");
	inputsList2.put("placeholder","Choose from the list of options");
	inputsList2.put("multiple",false);
	inputsList2.put("mandatory",false);
	inputsList2.put("type","select");
	query_map = Map();
	criteria_string = "regno>=0";
	query_map.put("criteria",criteria_string);
	response_map = zoho.cliq.getRecords("contactdb",query_map);
	optionsList = list();
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("list").size() > 0)
	{
		records = response_map.get("list");
		for each  record in records
		{
			option = Map();
			option.put("value",record.get("name").toLowerCase().replaceAll(" ",""));
			option.put("label",record.get("name"));
			optionsList.add(option);
		}
	}
	else
	{
		option = Map();
		option.put("value","noclient");
		option.put("label","No Clients Available");
		optionsList.add(option);
	}
	inputsList2.put("options",optionsList);
	inputsList.add(inputsList2);
	// 	//	inputsList2 = Map();
	// 	// 	inputsList2.put("label","Recipient");
	// 	// 	inputsList2.put("name","recipient");
	// 	// 	inputsList2.put("placeholder","Choose from the list of options");
	// 	// 	inputsList2.put("multiple",false);
	// 	// 	inputsList2.put("mandatory",true);
	// 	// 	inputsList2.put("type","select");
	// 	// 	optionsList = list();
	// 	// 	optionsList0 = Map();
	// 	// 	optionsList0.put("value","clienta");
	// 	// 	optionsList0.put("label","Client A");
	// 	// 	optionsList.add(optionsList0);
	// 	// 	optionsList1 = Map();
	// 	// 	optionsList1.put("value","clientb");
	// 	// 	optionsList1.put("label","Client B");
	// 	// 	optionsList.add(optionsList1);
	// 	// 	optionsList2 = Map();
	// 	// 	optionsList2.put("value","organisationa");
	// 	// 	optionsList2.put("label","Organisation A");
	// 	// 	optionsList.add(optionsList2);
	// 	// 	optionsList3 = Map();
	// 	// 	optionsList3.put("value","organisationb");
	// 	// 	optionsList3.put("label","Organisation B");
	// 	// 	optionsList.add(optionsList3);
	// 	// 	inputsList2.put("options",optionsList);
	// 	// 	inputsList.add(inputsList2);
	inputsList3 = Map();
	inputsList3.put("label","Date of Issue");
	inputsList3.put("name","dateofissue");
	inputsList3.put("value",date_of_issue);
	inputsList3.put("placeholder","Enter date of issue");
	inputsList3.put("mandatory",true);
	inputsList3.put("type","date");
	inputsList.add(inputsList3);
	inputsList4 = Map();
	inputsList4.put("label","Due Date");
	inputsList4.put("name","duedate");
	inputsList4.put("value",due_date);
	inputsList4.put("placeholder","Enter due date");
	inputsList4.put("mandatory",false);
	inputsList4.put("type","date");
	inputsList.add(inputsList4);
	inputsList5 = Map();
	inputsList5.put("label","Issuer");
	inputsList5.put("name","issuer");
	inputsList5.put("placeholder","Enter issuer name");
	// inputsList5.put("min_length","0");
	// inputsList5.put("max_length","25");
	inputsList5.put("mandatory",false);
	inputsList5.put("type","text");
	inputsList5.put("type","native_select");
	inputsList5.put("data_source","contacts");
	inputsList.add(inputsList5);
	inputsList6 = Map();
	inputsList6.put("label","Comment");
	inputsList6.put("name","comment");
	inputsList6.put("value",comment);
	inputsList6.put("placeholder","Provide bill details");
	// inputsList6.put("min_length","0");
	// inputsList6.put("max_length","25");
	inputsList6.put("mandatory",false);
	inputsList6.put("type","textarea");
	inputsList.add(inputsList6);
	inputsList7 = Map();
	inputsList7.put("label","Product | Service");
	inputsList7.put("name","product");
	inputsList7.put("value",product);
	inputsList7.put("placeholder","Enter product or service description");
	// inputsList7.put("min_length","0");
	// inputsList7.put("max_length","25");
	inputsList7.put("mandatory",false);
	inputsList7.put("type","text");
	inputsList.add(inputsList7);
	inputsList8 = Map();
	inputsList8.put("label","Quantity");
	inputsList8.put("name","quantity");
	inputsList8.put("value",quantity);
	inputsList8.put("placeholder","Enter quantity");
	// inputsList8.put("min","0");
	// inputsList8.put("max","100");
	inputsList8.put("mandatory",false);
	inputsList8.put("type","number");
	inputsList.add(inputsList8);
	inputsList9 = Map();
	inputsList9.put("label","Unit Price");
	inputsList9.put("name","unitprice");
	inputsList9.put("value",unit_price);
	inputsList9.put("placeholder","Enter unit price");
	// inputsList9.put("min","0");
	// inputsList9.put("max","100");
	inputsList9.put("mandatory",false);
	inputsList9.put("type","number");
	inputsList.add(inputsList9);
	inputsList10 = Map();
	inputsList10.put("label","Payment Method");
	inputsList10.put("name","paymentmethod");
	inputsList10.put("placeholder","Choose from the list of options");
	inputsList10.put("multiple",false);
	inputsList10.put("mandatory",false);
	inputsList10.put("type","select");
	optionsList = list();
	optionsList0 = Map();
	optionsList0.put("value","BankTransfer");
	optionsList0.put("label","Bank Transfer");
	optionsList.add(optionsList0);
	optionsList1 = Map();
	optionsList1.put("value","Cash");
	optionsList1.put("label","Cash");
	optionsList.add(optionsList1);
	optionsList2 = Map();
	optionsList2.put("value","CardPayment");
	optionsList2.put("label","Card Payment");
	optionsList.add(optionsList2);
	optionsList3 = Map();
	optionsList3.put("value","Barter");
	optionsList3.put("label","Barter");
	optionsList.add(optionsList3);
	optionsList4 = Map();
	optionsList4.put("value","Check");
	optionsList4.put("label","Check");
	optionsList.add(optionsList4);
	optionsList5 = Map();
	optionsList5.put("value","Credit");
	optionsList5.put("label","Credit");
	optionsList.add(optionsList5);
	inputsList10.put("options",optionsList);
	inputsList.add(inputsList10);
	inputsList11 = Map();
	inputsList11.put("label","Price List");
	inputsList11.put("name","pricelist");
	inputsList11.put("placeholder","Choose from the list of options");
	inputsList11.put("multiple",false);
	inputsList11.put("mandatory",false);
	inputsList11.put("type","select");
	optionsList = list();
	optionsList0 = Map();
	optionsList0.put("value","INR");
	optionsList0.put("label","INR");
	optionsList.add(optionsList0);
	optionsList1 = Map();
	optionsList1.put("value","StandardGBP");
	optionsList1.put("label","Standard (GBP)");
	optionsList.add(optionsList1);
	optionsList2 = Map();
	optionsList2.put("value","StandardUSD");
	optionsList2.put("label","Standard (USD)");
	optionsList.add(optionsList2);
	optionsList3 = Map();
	optionsList3.put("value","SpecialEUR");
	optionsList3.put("label","Special (EUR)");
	optionsList.add(optionsList3);
	inputsList11.put("options",optionsList);
	inputsList.add(inputsList11);
	inputsList12 = Map();
	inputsList12.put("label","Discount");
	inputsList12.put("name","discount");
	inputsList12.put("value",discount);
	inputsList12.put("placeholder","Enter discount (in %)");
	// inputsList12.put("min_length","0");
	// inputsList12.put("max_length","25");
	inputsList12.put("mandatory",false);
	inputsList12.put("type","text");
	inputsList.add(inputsList12);
	inputsList13 = Map();
	inputsList13.put("label","Tax");
	inputsList13.put("name","tax");
	inputsList13.put("value",tax);
	inputsList13.put("placeholder","Enter tax (in %)");
	// inputsList13.put("min","0");
	// inputsList13.put("max","100");
	inputsList13.put("mandatory",false);
	inputsList13.put("type","number");
	inputsList.add(inputsList13);
	response.put("inputs",inputsList);
	action = Map();
	action.put("type","invoke.function");
	action.put("name","formsubmit");
	response.put("action",action);
	return response;
}
else if(target.get("id").right(17) == "billdisplaywidget")
{
	val_ind = target.get("id").indexOf(" ");
	recordid = target.get("id").subText(0,val_ind);
	info recordid;
	response_map = zoho.cliq.getRecordById("billsdb",recordid);
	rows = list();
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("object") != null)
	{
		row = Map();
		record = response_map.get("object");
		project_id = record.get("projectid");
		date_of_issue = record.get("dateofissue");
		tax = record.get("tax");
		quantity = record.get("quantity");
		due_date = record.get("duedate");
		bill_no = record.get("billno");
		unit_price = record.get("unitprice");
		price_list = record.get("pricelist").get("label");
		comment = record.get("comment");
		issuer = record.get("issuer");
		issuer_first = issuer.get("first_name");
		issuer_last = issuer.get("last_name");
		if(issuer_last != null && issuer_last.trim() != "")
		{
			issuer_full = issuer_first.trim() + " " + issuer_last.trim();
		}
		else
		{
			issuer_full = issuer_first.trim();
		}
		paymentmethod = record.get("paymentmethod").get("label");
		recipient = record.get("recipient").get("label");
		product = record.get("product");
		discount = record.get("discount");
		row.put("Project ID",project_id);
		row.put("Date of Issue",date_of_issue);
		row.put("Tax",tax);
		row.put("Quantity",quantity);
		row.put("Due Date",due_date);
		row.put("Bill No",bill_no);
		row.put("Unit Price",unit_price);
		row.put("Price List",price_list);
		row.put("Comment",comment);
		row.put("Issuer",issuer_full);
		row.put("Payment Method",paymentmethod);
		row.put("Recipient",recipient);
		row.put("Product",product);
		row.put("Discount",discount);
		rows.add(row);
	}
	header = {"title":"Bill Details","buttons":{{"label":"Back","type":"invoke.function","name":"widgetForm","id":"backarchives"}}};
	sections = list();
	elements1 = list();
	elements1.add({"type":"table","headers":{"Project ID","Bill No","Date of Issue","Tax","Quantity","Due Date","Discount","Unit Price","Payment Method"},"rows":{{"Project ID":project_id,"Bill No":bill_no,"Date of Issue":date_of_issue,"Tax":tax,"Quantity":quantity,"Due Date":due_date,"Discount":discount,"Unit Price":unit_price,"Payment Method":paymentmethod}},"style":{"width":{"10","10","10"},"text_align":{"center","center","center"}}});
	sections.add({"id":1,"elements":elements1});
	elements2 = list();
	bill_details = "Project ID:   " + project_id + "\n\n" + "Bill No:   " + bill_no + "\n\n" + "Price List:  " + price_list + "\n\n" + "Comment:  " + comment + "\n\n" + "Issuer:  " + issuer_full + "\n\n" + "Payment Method:  " + paymentmethod + "\n\n" + "Product:  " + product + "\n\n" + "Recipient:  " + recipient + "\n\n" + "Date of Issue:  " + date_of_issue + "\n\n";
	elements2.add({"type":"text","text":bill_details});
	sections.add({"id":2,"elements":elements2});
	return {"type":"applet","tabs":{{"label":"Archives","id":"archives"}},"active_tab":"archives","sections":sections,"header":header};
}
else if(target.get("id").right(14) == "taskeditwidget")
{
	val_ind = target.get("id").indexOf(" ");
	recordid = target.get("id").subText(0,val_ind);
	info recordid;
	response_map = zoho.cliq.getRecordById("taskdb",recordid);
	rows = list();
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("object") != null)
	{
		row = Map();
		record = response_map.get("object");
		condition = record.get("condition").get("label");
		activity = record.get("activity").get("label");
		duration = record.get("duration");
		title = record.get("title");
		due_date = record.get("duedate");
		start_date = record.get("startdate");
		description = record.get("description");
		priority = record.get("priority").get("label");
		users = record.get("users");
		users_first = users.get("first_name");
		users_last = users.get("last_name");
		taskno = record.get("taskno");
		if(users_last != null && users_last.trim() != "")
		{
			users_full = users_first.trim() + " " + users_last.trim();
		}
		else
		{
			users_full = users_first.trim();
		}
		row.put("Condition",condition);
		row.put("Activity",activity);
		row.put("Duration",duration);
		row.put("Title",title);
		row.put("Start Date",start_date);
		row.put("Due Date",due_date);
		row.put("Priority",priority);
		row.put("Description",description);
		row.put("Users",users_full);
		row.put("Task No",taskno);
		rows.add(row);
	}
	response.put("type","form");
	response.put("title","New Task");
	response.put("name","updatetaskwidget");
	response.put("hint","Update the task details below");
	response.put("button_label","Update");
	inputsList = list();
	inputsList0 = Map();
	inputsList0.put("label","Title");
	inputsList0.put("name","title");
	inputsList0.put("value",title);
	inputsList0.put("placeholder","Enter title");
	// inputsList0.put("min_length","0");
	// inputsList0.put("max_length","25");
	inputsList0.put("mandatory",true);
	inputsList0.put("type","text");
	inputsList.add(inputsList0);
	inputsList9 = Map();
	inputsList9.put("label","Task No");
	inputsList9.put("name","taskno");
	inputsList9.put("value",taskno);
	inputsList9.put("placeholder","Enter task no");
	inputsList9.put("hint","Task No cannot be updated");
	// inputsList9.put("min","0");
	// inputsList9.put("max","100");
	inputsList9.put("mandatory",true);
	inputsList9.put("type","number");
	inputsList.add(inputsList9);
	inputsList1 = Map();
	inputsList1.put("label","Planned Duration");
	inputsList1.put("name","duration");
	inputsList1.put("value",duration);
	inputsList1.put("placeholder","Enter duration (in hours)");
	// inputsList1.put("min","0");
	// inputsList1.put("max","100");
	inputsList1.put("mandatory",false);
	inputsList1.put("type","number");
	inputsList.add(inputsList1);
	inputsList2 = Map();
	inputsList2.put("label","Start Date");
	inputsList2.put("name","startdate");
	inputsList2.put("value",start_date);
	inputsList2.put("placeholder","Enter start date");
	inputsList2.put("mandatory",false);
	inputsList2.put("type","date");
	inputsList.add(inputsList2);
	inputsList3 = Map();
	inputsList3.put("label","Due Date");
	inputsList3.put("name","duedate");
	inputsList3.put("value",due_date);
	inputsList3.put("placeholder","Enter due date");
	inputsList3.put("mandatory",false);
	inputsList3.put("type","date");
	inputsList.add(inputsList3);
	inputsList4 = Map();
	inputsList4.put("label","Activity Type");
	inputsList4.put("name","activity");
	inputsList4.put("placeholder","Choose from the list of options");
	inputsList4.put("multiple",false);
	inputsList4.put("mandatory",false);
	inputsList4.put("type","select");
	optionsList = list();
	optionsList0 = Map();
	optionsList0.put("value","consultation");
	optionsList0.put("label","Consultation");
	optionsList.add(optionsList0);
	optionsList1 = Map();
	optionsList1.put("value","copywriting");
	optionsList1.put("label","Copy Writing");
	optionsList.add(optionsList1);
	optionsList2 = Map();
	optionsList2.put("value","Design");
	optionsList2.put("label","Design");
	optionsList.add(optionsList2);
	optionsList3 = Map();
	optionsList3.put("value","ProjectManagement");
	optionsList3.put("label","Project Management");
	optionsList.add(optionsList3);
	optionsList4 = Map();
	optionsList4.put("value","Research");
	optionsList4.put("label","Research");
	optionsList.add(optionsList4);
	optionsList5 = Map();
	optionsList5.put("value","Strategy");
	optionsList5.put("label","Strategy");
	optionsList.add(optionsList5);
	inputsList4.put("options",optionsList);
	inputsList.add(inputsList4);
	inputsList5 = Map();
	inputsList5.put("label","Priority");
	inputsList5.put("name","priority");
	inputsList5.put("placeholder","Choose the priority of the task");
	inputsList5.put("multiple",false);
	inputsList5.put("mandatory",false);
	inputsList5.put("type","select");
	optionsList = list();
	optionsList0 = Map();
	optionsList0.put("value","highpriority");
	optionsList0.put("label","High Priority");
	optionsList.add(optionsList0);
	optionsList1 = Map();
	optionsList1.put("value","mediumpriority");
	optionsList1.put("label","Medium Priority");
	optionsList.add(optionsList1);
	optionsList2 = Map();
	optionsList2.put("value","LowPriority");
	optionsList2.put("label","Low Priority");
	optionsList.add(optionsList2);
	inputsList5.put("options",optionsList);
	inputsList.add(inputsList5);
	inputsList6 = Map();
	inputsList6.put("label","Condition");
	inputsList6.put("name","condition");
	inputsList6.put("placeholder","Choose the condition of the task");
	inputsList6.put("multiple",false);
	inputsList6.put("mandatory",false);
	inputsList6.put("type","select");
	optionsList = list();
	optionsList0 = Map();
	optionsList0.put("value","planned");
	optionsList0.put("label","Planned");
	optionsList.add(optionsList0);
	optionsList1 = Map();
	optionsList1.put("value","attention");
	optionsList1.put("label","Needs Attention");
	optionsList.add(optionsList1);
	optionsList2 = Map();
	optionsList2.put("value","InProgress");
	optionsList2.put("label","In Progress");
	optionsList.add(optionsList2);
	optionsList3 = Map();
	optionsList3.put("value","Completed");
	optionsList3.put("label","Completed");
	optionsList.add(optionsList3);
	inputsList6.put("options",optionsList);
	inputsList.add(inputsList6);
	inputsList7 = Map();
	inputsList7.put("label","Description");
	inputsList7.put("name","description");
	inputsList7.put("value",description);
	inputsList7.put("placeholder","Describe your task");
	// inputsList7.put("min_length","0");
	// inputsList7.put("max_length","25");
	inputsList7.put("mandatory",false);
	inputsList7.put("type","textarea");
	inputsList.add(inputsList7);
	inputsList8 = Map();
	inputsList8.put("label","Assigned to");
	inputsList8.put("name","users");
	inputsList8.put("placeholder","Enter assigned user");
	inputsList8.put("multiple",false);
	inputsList8.put("mandatory",false);
	inputsList8.put("type","text");
	inputsList8.put("type","native_select");
	inputsList8.put("data_source","contacts");
	inputsList.add(inputsList8);
	response.put("inputs",inputsList);
	action = Map();
	action.put("type","invoke.function");
	action.put("name","formsubmit");
	response.put("action",action);
	return response;
}
else if(target.get("id").right(17) == "taskdisplaywidget")
{
	val_ind = target.get("id").indexOf(" ");
	recordid = target.get("id").subText(0,val_ind);
	info recordid;
	response_map = zoho.cliq.getRecordById("taskdb",recordid);
	rows = list();
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("object") != null)
	{
		row = Map();
		record = response_map.get("object");
		condition = record.get("condition").get("label");
		activity = record.get("activity").get("label");
		duration = record.get("duration");
		title = record.get("title");
		due_date = record.get("duedate");
		start_date = record.get("startdate");
		description = record.get("description");
		priority = record.get("priority").get("label");
		users = record.get("users");
		users_first = users.get("first_name");
		users_last = users.get("last_name");
		taskno = record.get("taskno");
		if(users_last != null && users_last.trim() != "")
		{
			users_full = users_first.trim() + " " + users_last.trim();
		}
		else
		{
			users_full = users_first.trim();
		}
		row.put("Condition",condition);
		row.put("Activity",activity);
		row.put("Duration",duration);
		row.put("Title",title);
		row.put("Start Date",start_date);
		row.put("Due Date",due_date);
		row.put("Priority",priority);
		row.put("Description",description);
		row.put("Users",users_full);
		row.put("Task No",taskno);
		rows.add(row);
	}
	header = {"title":"Task Details","buttons":{{"label":"Back","type":"invoke.function","name":"widgetForm","id":"backarchives"}}};
	sections = list();
	elements1 = list();
	elements1.add({"type":"table","headers":{"Task No","Start Date","Due Date","Duration","Priority","Condition","Activity"},"rows":{{"Task No":taskno,"Start Date":start_date,"Due Date":due_date,"Duration":duration,"Priority":priority,"Condition":condition,"Activity":activity}},"style":{"width":{"10","10","10"},"text_align":{"center","center","center"}}});
	sections.add({"id":1,"elements":elements1});
	elements2 = list();
	task_details = "Task No:   " + taskno + "\n\n" + "Title:   " + title + "\n\n" + "Condition:  " + condition + "\n\n" + "Activity:  " + activity + "\n\n" + "Description:  " + description + "\n\n" + "Users:  " + users_full + "\n\n";
	elements2.add({"type":"text","text":task_details});
	sections.add({"id":2,"elements":elements2});
	return {"type":"applet","tabs":{{"label":"Archives","id":"archives"}},"active_tab":"archives","sections":sections,"header":header};
}
else if(target.get("id").right(17) == "contacteditwidget")
{
	val_ind = target.get("id").indexOf(" ");
	recordid = target.get("id").subText(0,val_ind);
	info recordid;
	response_map = zoho.cliq.getRecordById("contactdb",recordid);
	rows = list();
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("object") != null)
	{
		row = Map();
		record = response_map.get("object");
		regno = record.get("regno");
		website = record.get("website");
		name = record.get("name");
		emailid = record.get("emailid");
		category = record.get("category").get("label");
		contactid = record.get("contactid");
		country = record.get("country");
		timezone = record.get("timezone").get("label");
		taxno = record.get("taxno");
		idcode = record.get("idcode");
		postalcode = record.get("postalcode");
		address = record.get("address");
		description = record.get("description");
		row.put("Reg No",regno);
		row.put("Website",website);
		row.put("Name",name);
		row.put("Email ID",emailid);
		row.put("Category",category);
		row.put("Contact ID",contactid);
		row.put("Country",country);
		row.put("Time Zone",timezone);
		row.put("Tax No",taxno);
		row.put("ID Code",idcode);
		row.put("Postal Code",postalcode);
		row.put("Address",address);
		row.put("Description",description);
		rows.add(row);
	}
	response.put("type","form");
	response.put("title","Contact Details");
	response.put("name","saveupdatecontactwidget");
	response.put("hint","Update the contact details below");
	response.put("button_label","Update");
	inputsList = list();
	inputsList0 = Map();
	inputsList0.put("label","Contact ID");
	inputsList0.put("name","contactid");
	inputsList0.put("value",contactid);
	inputsList0.put("placeholder","Enter contact id");
	inputsList0.put("hint","Contact ID cannot be updated");
	// inputsList0.put("min","0");
	// inputsList0.put("max","100");
	inputsList0.put("mandatory",true);
	inputsList0.put("type","number");
	inputsList.add(inputsList0);
	inputsList1 = Map();
	inputsList1.put("label","Company | Person Name");
	inputsList1.put("name","name");
	inputsList1.put("value",name);
	inputsList1.put("placeholder","Enter company or person name");
	// inputsList1.put("min_length","0");
	// inputsList1.put("max_length","25");
	inputsList1.put("mandatory",true);
	inputsList1.put("type","text");
	inputsList.add(inputsList1);
	inputsList3 = Map();
	inputsList3.put("label","Email ID");
	inputsList3.put("name","emailid");
	inputsList3.put("value",emailid);
	inputsList3.put("placeholder","Enter email id");
	// inputsList3.put("min_length","0");
	// inputsList3.put("max_length","25");
	inputsList3.put("mandatory",false);
	inputsList3.put("type","text");
	inputsList3.put("format","email");
	inputsList.add(inputsList3);
	inputsList4 = Map();
	inputsList4.put("label","Website");
	inputsList4.put("name","website");
	inputsList4.put("value",website);
	inputsList4.put("placeholder","Enter website name");
	// inputsList4.put("min_length","0");
	// inputsList4.put("max_length","25");
	inputsList4.put("mandatory",false);
	inputsList4.put("type","text");
	inputsList4.put("format","url");
	inputsList.add(inputsList4);
	inputsList5 = Map();
	inputsList5.put("label","Category");
	inputsList5.put("name","category");
	inputsList5.put("placeholder","Choose from the list of options");
	inputsList5.put("multiple",false);
	inputsList5.put("mandatory",false);
	inputsList5.put("type","select");
	optionsList = list();
	optionsList0 = Map();
	optionsList0.put("value","vipclient");
	optionsList0.put("label","A - VIP Client");
	optionsList.add(optionsList0);
	optionsList1 = Map();
	optionsList1.put("value","standardclient");
	optionsList1.put("label","B - Standard Client");
	optionsList.add(optionsList1);
	optionsList2 = Map();
	optionsList2.put("value","exclient");
	optionsList2.put("label","C - Ex - Client");
	optionsList.add(optionsList2);
	inputsList5.put("options",optionsList);
	inputsList.add(inputsList5);
	inputsList6 = Map();
	inputsList6.put("label","Description");
	inputsList6.put("name","description");
	inputsList6.put("value",description);
	inputsList6.put("placeholder","Describe about the contact");
	// inputsList6.put("min_length","0");
	// inputsList6.put("max_length","25");
	inputsList6.put("mandatory",false);
	inputsList6.put("type","textarea");
	inputsList.add(inputsList6);
	inputsList7 = Map();
	inputsList7.put("label","Address");
	inputsList7.put("name","address");
	inputsList7.put("value",address);
	inputsList7.put("placeholder","Enter address details");
	// inputsList7.put("min_length","0");
	// inputsList7.put("max_length","25");
	inputsList7.put("mandatory",false);
	inputsList7.put("type","text");
	inputsList.add(inputsList7);
	inputsList8 = Map();
	inputsList8.put("label","Postal Code");
	inputsList8.put("name","postalcode");
	inputsList8.put("value",postalcode);
	inputsList8.put("placeholder","Enter postal code");
	// inputsList8.put("min","0");
	// inputsList8.put("max","100");
	inputsList8.put("mandatory",false);
	inputsList8.put("type","number");
	inputsList.add(inputsList8);
	inputsList9 = Map();
	inputsList9.put("label","Country");
	inputsList9.put("name","country");
	inputsList9.put("value",country);
	inputsList9.put("placeholder","Enter country name");
	// inputsList9.put("min_length","0");
	// inputsList9.put("max_length","25");
	inputsList9.put("mandatory",false);
	inputsList9.put("type","text");
	inputsList.add(inputsList9);
	inputsList10 = Map();
	inputsList10.put("label","Time Zone");
	inputsList10.put("name","timezone");
	inputsList10.put("placeholder","Enter time zone");
	inputsList10.put("multiple",false);
	inputsList10.put("mandatory",false);
	inputsList10.put("type","select");
	optionsList = list();
	optionsList0 = Map();
	optionsList0.put("value","usa");
	optionsList0.put("label","(GMT-05:00) Eastern Time (US & Canada)");
	optionsList.add(optionsList0);
	optionsList1 = Map();
	optionsList1.put("value","uk");
	optionsList1.put("label","(GMT+00:00) London");
	optionsList.add(optionsList1);
	optionsList2 = Map();
	optionsList2.put("value","china");
	optionsList2.put("label","(GMT+08:00) Beijing, Hong Kong");
	optionsList.add(optionsList2);
	optionsList3 = Map();
	optionsList3.put("value","japan");
	optionsList3.put("label","(GMT+09:00) Tokyo, Osaka, Sapporo");
	optionsList.add(optionsList3);
	optionsList4 = Map();
	optionsList4.put("value","russia");
	optionsList4.put("label","(GMT+03:00) Moscow, St. Petersburg");
	optionsList.add(optionsList4);
	optionsList5 = Map();
	optionsList5.put("value","india");
	optionsList5.put("label","(GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi");
	optionsList.add(optionsList5);
	inputsList10.put("options",optionsList);
	inputsList.add(inputsList10);
	inputsList11 = Map();
	inputsList11.put("label","ID Code");
	inputsList11.put("name","idcode");
	inputsList11.put("value",idcode);
	inputsList11.put("placeholder","Enter id code");
	// inputsList11.put("min","0");
	// inputsList11.put("max","100");
	inputsList11.put("mandatory",false);
	inputsList11.put("type","number");
	inputsList.add(inputsList11);
	inputsList12 = Map();
	inputsList12.put("label","Reg No.");
	inputsList12.put("name","regno");
	inputsList12.put("value",regno);
	inputsList12.put("placeholder","Enter registration number");
	// inputsList12.put("min","0");
	// inputsList12.put("max","100");
	inputsList12.put("mandatory",false);
	inputsList12.put("type","number");
	inputsList.add(inputsList12);
	inputsList13 = Map();
	inputsList13.put("label","Tax | VAT No.");
	inputsList13.put("name","taxno");
	inputsList13.put("value",taxno);
	inputsList13.put("placeholder","Enter tax or VAT number");
	// inputsList13.put("min","0");
	// inputsList13.put("max","100");
	inputsList13.put("mandatory",false);
	inputsList13.put("type","number");
	inputsList.add(inputsList13);
	response.put("inputs",inputsList);
	action = Map();
	action.put("type","invoke.function");
	action.put("name","formsubmit");
	response.put("action",action);
	return response;
}
else if(target.get("id").right(20) == "contactdisplaywidget")
{
	val_ind = target.get("id").indexOf(" ");
	recordid = target.get("id").subText(0,val_ind);
	info recordid;
	response_map = zoho.cliq.getRecordById("contactdb",recordid);
	rows = list();
	info response_map;
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("object") != null)
	{
		row = Map();
		record = response_map.get("object");
		regno = record.get("regno");
		website = record.get("website");
		name = record.get("name");
		emailid = record.get("emailid");
		category = record.get("category").get("label");
		contactid = record.get("contactid");
		country = record.get("country");
		timezone = record.get("timezone").get("label");
		taxno = record.get("taxno");
		idcode = record.get("idcode");
		postalcode = record.get("postalcode");
		address = record.get("address");
		description = record.get("description");
		row.put("Contact ID",contactid);
		row.put("Register No",regno);
		row.put("Name",name);
		row.put("Email ID",emailid);
		row.put("Website",website);
		row.put("Category",category);
		row.put("Address",address);
		row.put("Postal Code",postalcode);
		row.put("Country",country);
		row.put("Time Zone",timezone);
		row.put("ID Code",idcode);
		row.put("Tax | VAT No",taxno);
		row.put("Description",description);
		rows.add(row);
	}
	// table = {"type":"table","title":"Contact Detail","data":{"headers":{"Contact ID","Register No","Name","Phone No","Email ID","Website","Category","Address","Postal Code","Country","Time Zone","ID Code","Tax | VAT No","Description"},"rows":rows}};
	// response = {"text":"☎️ Contact Detail Detail","card":{"theme":"modern-inline"},"slides":{table}};
	// zoho.cliq.postToChat(chat.get("id"),response);
	header = {"title":"Contact Details","buttons":{{"label":"Back","type":"invoke.function","name":"widgetForm","id":"backclients"}}};
	sections = list();
	elements1 = list();
	elements1.add({"type":"table","headers":{"Name","Contact ID","Register No","Category","Postal Code","Country","ID Code","Tax | VAT No"},"rows":{{"Name":name,"Contact ID":contactid,"Register No":regno,"Category":category,"Postal Code":postalcode,"Country":country,"ID Code":idcode,"Tax | VAT No":taxno}},"style":{"width":{"10","10","10"},"text_align":{"center","center","center"}}});
	sections.add({"id":1,"elements":elements1});
	elements2 = list();
	contact_details = "Name:   " + name + "\n\n" + "Contact ID:   " + contactid + "\n\n" + "Email ID:  " + emailid + "\n\n" + "Website:  " + website + "\n\n" + "Category:  " + category + "\n\n" + "Address:  " + address + "\n\n" + "Country:  " + country + "\n\n" + "Time Zone:  " + timezone + "\n\n" + "Description:  " + description + "\n\n";
	elements2.add({"type":"text","text":contact_details});
	sections.add({"id":2,"elements":elements2});
	return {"type":"applet","tabs":{{"label":"Clients","id":"clients"}},"active_tab":"clients","sections":sections,"header":header};
}
return response;
